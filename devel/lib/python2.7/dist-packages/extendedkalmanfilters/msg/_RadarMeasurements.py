# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from extendedkalmanfilters/RadarMeasurements.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarMeasurements(genpy.Message):
  _md5sum = "8cfdab16d9df6f0eace3ca39d1e59ae0"
  _type = "extendedkalmanfilters/RadarMeasurements"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string sensor_type_
float32 rho_measured_
float32 phi_measured_
float32 rhodot_measured_
uint64 time_stamp_
float32 x_ground_truth_
float32 y_ground_truth_
float32 vx_ground_truth_
float32 vy_ground_truth_"""
  __slots__ = ['sensor_type_','rho_measured_','phi_measured_','rhodot_measured_','time_stamp_','x_ground_truth_','y_ground_truth_','vx_ground_truth_','vy_ground_truth_']
  _slot_types = ['string','float32','float32','float32','uint64','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_type_,rho_measured_,phi_measured_,rhodot_measured_,time_stamp_,x_ground_truth_,y_ground_truth_,vx_ground_truth_,vy_ground_truth_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarMeasurements, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_type_ is None:
        self.sensor_type_ = ''
      if self.rho_measured_ is None:
        self.rho_measured_ = 0.
      if self.phi_measured_ is None:
        self.phi_measured_ = 0.
      if self.rhodot_measured_ is None:
        self.rhodot_measured_ = 0.
      if self.time_stamp_ is None:
        self.time_stamp_ = 0
      if self.x_ground_truth_ is None:
        self.x_ground_truth_ = 0.
      if self.y_ground_truth_ is None:
        self.y_ground_truth_ = 0.
      if self.vx_ground_truth_ is None:
        self.vx_ground_truth_ = 0.
      if self.vy_ground_truth_ is None:
        self.vy_ground_truth_ = 0.
    else:
      self.sensor_type_ = ''
      self.rho_measured_ = 0.
      self.phi_measured_ = 0.
      self.rhodot_measured_ = 0.
      self.time_stamp_ = 0
      self.x_ground_truth_ = 0.
      self.y_ground_truth_ = 0.
      self.vx_ground_truth_ = 0.
      self.vy_ground_truth_ = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sensor_type_
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fQ4f().pack(_x.rho_measured_, _x.phi_measured_, _x.rhodot_measured_, _x.time_stamp_, _x.x_ground_truth_, _x.y_ground_truth_, _x.vx_ground_truth_, _x.vy_ground_truth_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensor_type_ = str[start:end].decode('utf-8')
      else:
        self.sensor_type_ = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.rho_measured_, _x.phi_measured_, _x.rhodot_measured_, _x.time_stamp_, _x.x_ground_truth_, _x.y_ground_truth_, _x.vx_ground_truth_, _x.vy_ground_truth_,) = _get_struct_3fQ4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sensor_type_
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fQ4f().pack(_x.rho_measured_, _x.phi_measured_, _x.rhodot_measured_, _x.time_stamp_, _x.x_ground_truth_, _x.y_ground_truth_, _x.vx_ground_truth_, _x.vy_ground_truth_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensor_type_ = str[start:end].decode('utf-8')
      else:
        self.sensor_type_ = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.rho_measured_, _x.phi_measured_, _x.rhodot_measured_, _x.time_stamp_, _x.x_ground_truth_, _x.y_ground_truth_, _x.vx_ground_truth_, _x.vy_ground_truth_,) = _get_struct_3fQ4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fQ4f = None
def _get_struct_3fQ4f():
    global _struct_3fQ4f
    if _struct_3fQ4f is None:
        _struct_3fQ4f = struct.Struct("<3fQ4f")
    return _struct_3fQ4f
