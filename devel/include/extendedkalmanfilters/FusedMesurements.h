// Generated by gencpp from file extendedkalmanfilters/FusedMesurements.msg
// DO NOT EDIT!


#ifndef EXTENDEDKALMANFILTERS_MESSAGE_FUSEDMESUREMENTS_H
#define EXTENDEDKALMANFILTERS_MESSAGE_FUSEDMESUREMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extendedkalmanfilters
{
template <class ContainerAllocator>
struct FusedMesurements_
{
  typedef FusedMesurements_<ContainerAllocator> Type;

  FusedMesurements_()
    : x_estimated_(0.0)
    , y_estimated_(0.0)
    , time_stamp_(0)
    , vx_estimated_(0.0)
    , vy_estimated_(0.0)
    , x_gt_(0.0)
    , y_gt_(0.0)
    , vx_gt_(0.0)
    , vy_gt_(0.0)  {
    }
  FusedMesurements_(const ContainerAllocator& _alloc)
    : x_estimated_(0.0)
    , y_estimated_(0.0)
    , time_stamp_(0)
    , vx_estimated_(0.0)
    , vy_estimated_(0.0)
    , x_gt_(0.0)
    , y_gt_(0.0)
    , vx_gt_(0.0)
    , vy_gt_(0.0)  {
  (void)_alloc;
    }



   typedef float _x_estimated__type;
  _x_estimated__type x_estimated_;

   typedef float _y_estimated__type;
  _y_estimated__type y_estimated_;

   typedef uint64_t _time_stamp__type;
  _time_stamp__type time_stamp_;

   typedef float _vx_estimated__type;
  _vx_estimated__type vx_estimated_;

   typedef float _vy_estimated__type;
  _vy_estimated__type vy_estimated_;

   typedef float _x_gt__type;
  _x_gt__type x_gt_;

   typedef float _y_gt__type;
  _y_gt__type y_gt_;

   typedef float _vx_gt__type;
  _vx_gt__type vx_gt_;

   typedef float _vy_gt__type;
  _vy_gt__type vy_gt_;





  typedef boost::shared_ptr< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> const> ConstPtr;

}; // struct FusedMesurements_

typedef ::extendedkalmanfilters::FusedMesurements_<std::allocator<void> > FusedMesurements;

typedef boost::shared_ptr< ::extendedkalmanfilters::FusedMesurements > FusedMesurementsPtr;
typedef boost::shared_ptr< ::extendedkalmanfilters::FusedMesurements const> FusedMesurementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator2> & rhs)
{
  return lhs.x_estimated_ == rhs.x_estimated_ &&
    lhs.y_estimated_ == rhs.y_estimated_ &&
    lhs.time_stamp_ == rhs.time_stamp_ &&
    lhs.vx_estimated_ == rhs.vx_estimated_ &&
    lhs.vy_estimated_ == rhs.vy_estimated_ &&
    lhs.x_gt_ == rhs.x_gt_ &&
    lhs.y_gt_ == rhs.y_gt_ &&
    lhs.vx_gt_ == rhs.vx_gt_ &&
    lhs.vy_gt_ == rhs.vy_gt_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extendedkalmanfilters

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78dd8106ff3952f3bd4013441cdc9454";
  }

  static const char* value(const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78dd8106ff3952f3ULL;
  static const uint64_t static_value2 = 0xbd4013441cdc9454ULL;
};

template<class ContainerAllocator>
struct DataType< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extendedkalmanfilters/FusedMesurements";
  }

  static const char* value(const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_estimated_\n"
"float32 y_estimated_\n"
"uint64 time_stamp_\n"
"float32 vx_estimated_\n"
"float32 vy_estimated_\n"
"float32 x_gt_\n"
"float32 y_gt_\n"
"float32 vx_gt_\n"
"float32 vy_gt_\n"
;
  }

  static const char* value(const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_estimated_);
      stream.next(m.y_estimated_);
      stream.next(m.time_stamp_);
      stream.next(m.vx_estimated_);
      stream.next(m.vy_estimated_);
      stream.next(m.x_gt_);
      stream.next(m.y_gt_);
      stream.next(m.vx_gt_);
      stream.next(m.vy_gt_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusedMesurements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extendedkalmanfilters::FusedMesurements_<ContainerAllocator>& v)
  {
    s << indent << "x_estimated_: ";
    Printer<float>::stream(s, indent + "  ", v.x_estimated_);
    s << indent << "y_estimated_: ";
    Printer<float>::stream(s, indent + "  ", v.y_estimated_);
    s << indent << "time_stamp_: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_stamp_);
    s << indent << "vx_estimated_: ";
    Printer<float>::stream(s, indent + "  ", v.vx_estimated_);
    s << indent << "vy_estimated_: ";
    Printer<float>::stream(s, indent + "  ", v.vy_estimated_);
    s << indent << "x_gt_: ";
    Printer<float>::stream(s, indent + "  ", v.x_gt_);
    s << indent << "y_gt_: ";
    Printer<float>::stream(s, indent + "  ", v.y_gt_);
    s << indent << "vx_gt_: ";
    Printer<float>::stream(s, indent + "  ", v.vx_gt_);
    s << indent << "vy_gt_: ";
    Printer<float>::stream(s, indent + "  ", v.vy_gt_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDEDKALMANFILTERS_MESSAGE_FUSEDMESUREMENTS_H
