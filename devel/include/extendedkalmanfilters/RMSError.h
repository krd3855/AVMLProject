// Generated by gencpp from file extendedkalmanfilters/RMSError.msg
// DO NOT EDIT!


#ifndef EXTENDEDKALMANFILTERS_MESSAGE_RMSERROR_H
#define EXTENDEDKALMANFILTERS_MESSAGE_RMSERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extendedkalmanfilters
{
template <class ContainerAllocator>
struct RMSError_
{
  typedef RMSError_<ContainerAllocator> Type;

  RMSError_()
    : x_err_(0.0)
    , y_err_(0.0)
    , vx_err_(0.0)
    , vy_err_(0.0)  {
    }
  RMSError_(const ContainerAllocator& _alloc)
    : x_err_(0.0)
    , y_err_(0.0)
    , vx_err_(0.0)
    , vy_err_(0.0)  {
  (void)_alloc;
    }



   typedef double _x_err__type;
  _x_err__type x_err_;

   typedef double _y_err__type;
  _y_err__type y_err_;

   typedef double _vx_err__type;
  _vx_err__type vx_err_;

   typedef double _vy_err__type;
  _vy_err__type vy_err_;





  typedef boost::shared_ptr< ::extendedkalmanfilters::RMSError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extendedkalmanfilters::RMSError_<ContainerAllocator> const> ConstPtr;

}; // struct RMSError_

typedef ::extendedkalmanfilters::RMSError_<std::allocator<void> > RMSError;

typedef boost::shared_ptr< ::extendedkalmanfilters::RMSError > RMSErrorPtr;
typedef boost::shared_ptr< ::extendedkalmanfilters::RMSError const> RMSErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extendedkalmanfilters::RMSError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extendedkalmanfilters::RMSError_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::RMSError_<ContainerAllocator2> & rhs)
{
  return lhs.x_err_ == rhs.x_err_ &&
    lhs.y_err_ == rhs.y_err_ &&
    lhs.vx_err_ == rhs.vx_err_ &&
    lhs.vy_err_ == rhs.vy_err_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extendedkalmanfilters::RMSError_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::RMSError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extendedkalmanfilters

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::RMSError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::RMSError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::RMSError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80ba0cfe9e605460189c638c99edde45";
  }

  static const char* value(const ::extendedkalmanfilters::RMSError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80ba0cfe9e605460ULL;
  static const uint64_t static_value2 = 0x189c638c99edde45ULL;
};

template<class ContainerAllocator>
struct DataType< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extendedkalmanfilters/RMSError";
  }

  static const char* value(const ::extendedkalmanfilters::RMSError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_err_\n"
"float64 y_err_\n"
"float64 vx_err_\n"
"float64 vy_err_\n"
;
  }

  static const char* value(const ::extendedkalmanfilters::RMSError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_err_);
      stream.next(m.y_err_);
      stream.next(m.vx_err_);
      stream.next(m.vy_err_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RMSError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extendedkalmanfilters::RMSError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extendedkalmanfilters::RMSError_<ContainerAllocator>& v)
  {
    s << indent << "x_err_: ";
    Printer<double>::stream(s, indent + "  ", v.x_err_);
    s << indent << "y_err_: ";
    Printer<double>::stream(s, indent + "  ", v.y_err_);
    s << indent << "vx_err_: ";
    Printer<double>::stream(s, indent + "  ", v.vx_err_);
    s << indent << "vy_err_: ";
    Printer<double>::stream(s, indent + "  ", v.vy_err_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDEDKALMANFILTERS_MESSAGE_RMSERROR_H
