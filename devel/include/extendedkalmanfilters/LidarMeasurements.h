// Generated by gencpp from file extendedkalmanfilters/LidarMeasurements.msg
// DO NOT EDIT!


#ifndef EXTENDEDKALMANFILTERS_MESSAGE_LIDARMEASUREMENTS_H
#define EXTENDEDKALMANFILTERS_MESSAGE_LIDARMEASUREMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extendedkalmanfilters
{
template <class ContainerAllocator>
struct LidarMeasurements_
{
  typedef LidarMeasurements_<ContainerAllocator> Type;

  LidarMeasurements_()
    : sensor_type_()
    , x_measured_(0.0)
    , y_measured_(0.0)
    , time_stamp_(0)
    , x_ground_truth_(0.0)
    , y_ground_truth_(0.0)
    , vx_ground_truth_(0.0)
    , vy_ground_truth_(0.0)  {
    }
  LidarMeasurements_(const ContainerAllocator& _alloc)
    : sensor_type_(_alloc)
    , x_measured_(0.0)
    , y_measured_(0.0)
    , time_stamp_(0)
    , x_ground_truth_(0.0)
    , y_ground_truth_(0.0)
    , vx_ground_truth_(0.0)
    , vy_ground_truth_(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_type__type;
  _sensor_type__type sensor_type_;

   typedef float _x_measured__type;
  _x_measured__type x_measured_;

   typedef float _y_measured__type;
  _y_measured__type y_measured_;

   typedef uint64_t _time_stamp__type;
  _time_stamp__type time_stamp_;

   typedef float _x_ground_truth__type;
  _x_ground_truth__type x_ground_truth_;

   typedef float _y_ground_truth__type;
  _y_ground_truth__type y_ground_truth_;

   typedef float _vx_ground_truth__type;
  _vx_ground_truth__type vx_ground_truth_;

   typedef float _vy_ground_truth__type;
  _vy_ground_truth__type vy_ground_truth_;





  typedef boost::shared_ptr< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> const> ConstPtr;

}; // struct LidarMeasurements_

typedef ::extendedkalmanfilters::LidarMeasurements_<std::allocator<void> > LidarMeasurements;

typedef boost::shared_ptr< ::extendedkalmanfilters::LidarMeasurements > LidarMeasurementsPtr;
typedef boost::shared_ptr< ::extendedkalmanfilters::LidarMeasurements const> LidarMeasurementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_type_ == rhs.sensor_type_ &&
    lhs.x_measured_ == rhs.x_measured_ &&
    lhs.y_measured_ == rhs.y_measured_ &&
    lhs.time_stamp_ == rhs.time_stamp_ &&
    lhs.x_ground_truth_ == rhs.x_ground_truth_ &&
    lhs.y_ground_truth_ == rhs.y_ground_truth_ &&
    lhs.vx_ground_truth_ == rhs.vx_ground_truth_ &&
    lhs.vy_ground_truth_ == rhs.vy_ground_truth_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator1> & lhs, const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extendedkalmanfilters

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea428e2c328a50b9bcbdd497cb731bc5";
  }

  static const char* value(const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea428e2c328a50b9ULL;
  static const uint64_t static_value2 = 0xbcbdd497cb731bc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extendedkalmanfilters/LidarMeasurements";
  }

  static const char* value(const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sensor_type_\n"
"float32 x_measured_\n"
"float32 y_measured_\n"
"uint64 time_stamp_\n"
"float32 x_ground_truth_\n"
"float32 y_ground_truth_\n"
"float32 vx_ground_truth_\n"
"float32 vy_ground_truth_\n"
;
  }

  static const char* value(const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_type_);
      stream.next(m.x_measured_);
      stream.next(m.y_measured_);
      stream.next(m.time_stamp_);
      stream.next(m.x_ground_truth_);
      stream.next(m.y_ground_truth_);
      stream.next(m.vx_ground_truth_);
      stream.next(m.vy_ground_truth_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LidarMeasurements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extendedkalmanfilters::LidarMeasurements_<ContainerAllocator>& v)
  {
    s << indent << "sensor_type_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_type_);
    s << indent << "x_measured_: ";
    Printer<float>::stream(s, indent + "  ", v.x_measured_);
    s << indent << "y_measured_: ";
    Printer<float>::stream(s, indent + "  ", v.y_measured_);
    s << indent << "time_stamp_: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_stamp_);
    s << indent << "x_ground_truth_: ";
    Printer<float>::stream(s, indent + "  ", v.x_ground_truth_);
    s << indent << "y_ground_truth_: ";
    Printer<float>::stream(s, indent + "  ", v.y_ground_truth_);
    s << indent << "vx_ground_truth_: ";
    Printer<float>::stream(s, indent + "  ", v.vx_ground_truth_);
    s << indent << "vy_ground_truth_: ";
    Printer<float>::stream(s, indent + "  ", v.vy_ground_truth_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDEDKALMANFILTERS_MESSAGE_LIDARMEASUREMENTS_H
